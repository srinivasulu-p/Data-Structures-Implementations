package Trees;

/*
	In this implementation of Binary Search Tree, I am considering data to be Integer for simplicity purpose.
	The following methods of Binary search Tree are implemented her:
		1. find(int data)     --- returns true if given value is present in BST else false.
		2. insert(int data)   --- inserts given int value in the BST
		3. delete(int data)   --- deletes the given integer data from BST if present.
		4. display()          --- prints all the node values in-order(ascending)
		5. findMin()          --- returns minimum value node in the BST using iterative technique
		6. findMinRec()       --- returns minimum value node in the BST using Recursion technique
		7. findMax()          --- returns maximum value node in the BST using iterative technique
		8. findHeight()       --- returns maximum height of the BST using Recursion technique.
 */
public class BST {
	private Node root;
	public BST(){
		root = null;	
	}
	/*
			Structure of node in BST is defined here
			setters and getters should used to modify or access the data
	 */
	public class Node {
		private int data;
		private Node left;
		private Node right;
		public Node(int data,Node left,Node right){
			this.data = data;
			this.left = left;
			this.right = right;		
		}
		public void setData(int newdata){
			this.data = newdata;		
		}
		public int getData(){
			return this.data;		
		}
		public void setLeft(Node newleft){
			this.left = newleft;		
		}
		public Node getLeft(){
			return this.left;	
		}
		public void setRight(Node newright){
			this.right = newright;		
		}
		public Node getRight(){
			return this.right;	
		}	
	}

	/*
		"find" method returns true if given value of node is present else false.
	 */

	public boolean find(int udata){
		Node curr = root;
		while(curr != null){
			if(curr.getData() == udata){
				return true;
			}
			else if(curr.getData() > udata){
				curr = curr.getLeft();
			}
			else if(curr.getData() < udata){
				curr = curr.getRight();
			}
		}
		return false;
	}
	/*
		"insert" method inserts the given value in BST.
		 	if given value is already present in the BST, it inserts new node with same value to its left
	 */
	public void insert(int udata){
		Node curr = root;
		Node prev = null;
		if(curr == null){
			root = new Node(udata,null,null);
			return;
		}
		while(true){
			prev = curr;
			if(prev.getData() >= udata){
				curr = curr.getLeft();
				if(curr == null){
					prev.setLeft(new Node(udata,null,null));
					return;
				}
			}
			else{
				curr = curr.getRight();
				if(curr == null){
					prev.setRight(new Node(udata,null,null));
					return;
				}
			}
		}
	}
	/*
		"delete" method returns true if given value is present in BST and successfully removed, else it returns false.
			This method needs to consider three scenarios,
				1. delete node with no child nodes.
				2. delete node with one child node.
				3. delete node with both child nodes.
	 */
	public boolean delete(int udata){
		Node delnode = root;
		Node prev = null;
		boolean isFound = true;
		boolean isLeft = false;
		boolean isRight = false;
		//code to determine whether the given node is present in BST or not AND also finding whether it is left child or right child or even root node
		while(isFound && delnode != null){
			if(delnode.getData() == udata){
			    isFound = false;
			}else if(delnode.getData() > udata){
				isLeft = true;
				isRight = false;
				prev = delnode;
				delnode = delnode.getLeft();
			}else if(delnode.getData() < udata){
				isRight = true;
				isLeft = false;
				prev = delnode;
				delnode = delnode.getRight();
			}
		}
		if(delnode == null){
			return false;
		}
		//if we are here then we found the node to be deleted
		//case 1: if node to be deleted is leaf node
		if(delnode.getLeft() == null && delnode.getRight() == null){
			if(delnode.getData() <= prev.getData()){
				prev.setLeft(null);
				return true;
			}
			else{
				prev.setRight(null);
				return true;
			}
		}
		//case 2: if node to be deleted has one child -- left or right
		if(delnode.getLeft() == null || delnode.getRight() == null){
			if(delnode.getData() <= prev.getData()){
				if(delnode.getLeft() == null){
					prev.setLeft(delnode.getRight());
					return true;
				}
				else {
					prev.setLeft(delnode.getLeft());
					return true;
				}
			}
			else{
				if(delnode.getLeft() == null){
					prev.setRight(delnode.getRight());
					return true;
				}
				else {
					prev.setRight(delnode.getLeft());
					return true;
				}
			}
		}
		//case 3: if node to be deleted has both child nodes 
		if(delnode.getLeft() != null && delnode.getRight() != null){
			Node succ = getSuccessor(delnode);
			if(isLeft == false && isRight == false){
				succ.setLeft(delnode.getLeft());
				succ.setRight(delnode.getRight());
				root = succ;
				return true;
			}else if(isLeft == true){
				succ.setLeft(delnode.getLeft());
				succ.setRight(delnode.getRight());
				prev.setLeft(succ);
				return true;
			}else{
				succ.setLeft(delnode.getLeft());
				succ.setRight(delnode.getRight());
				prev.setRight(succ);
				return true;
			}
		}
		return false;
	}
	/*
		"getSuccessor" is a utility function to find node to replace node that needs to be deleted.
	 */
	public Node getSuccessor(Node currnode){
		Node succprev = currnode;
		Node successor = currnode.getRight();
		if(successor.getLeft() == null){
			succprev.setRight(successor.getRight());
			return successor;
		}
		while(successor.getLeft() != null){
			succprev = successor;
			successor = successor.getLeft();
		}
		succprev.setLeft(successor.getRight());
		return successor;
	}
	//Function to display all the nodes in BST --- 0(n)
	public void display(Node root){
		if(root != null){
			display(root.getLeft());
			System.out.print(" " + root.getData());
			display(root.getRight());
		}
	}
	//Function to find min element in the BST using iterative method.
	public int findMin(Node root){
		if(root == null){
			System.out.println("The tree is empty");
			return -1;
		}
		else{
			while(root.getLeft() != null){
				root = root.getLeft();
			}
			return root.getData();
		}
	}
	//Function to find min element in BST using Recursion.
	public int findMinRec(Node root){
		if(root == null){
			System.out.println("Tree is empty");
			return -1;
		}
		else if(root.getLeft() == null){
			return root.getData();
		}
		return findMinRec(root.getLeft());
	}

	/*
			Function to find max element in the BST using iterative.
	 */

	public int findMax(Node currNode){
		if(root == null){
			System.out.println("The tree is empty");
			return -1;
		}
		else{
			while(root.getRight() !=null){
				currNode = root.getRight();
			}
			return root.getData();
		}
	}
	//function to find height of BST
	public int findHeight(Node root){
		if(root == null){
			return -1;
		}
		int leftHeight = findHeight(root.getLeft());
		int rightHeight = findHeight(root.getRight());
		return Math.max(leftHeight,rightHeight)+1;
	}
}
